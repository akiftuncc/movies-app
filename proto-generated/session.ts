// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.5
//   protoc               v5.28.2
// source: session.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "session";

/** src/proto/session.proto */

export enum TimeSlot {
  SLOT_10_12 = 0,
  SLOT_12_14 = 1,
  SLOT_14_16 = 2,
  SLOT_16_18 = 3,
  SLOT_18_20 = 4,
  SLOT_20_22 = 5,
  SLOT_22_00 = 6,
  UNRECOGNIZED = -1,
}

export function timeSlotFromJSON(object: any): TimeSlot {
  switch (object) {
    case 0:
    case "SLOT_10_12":
      return TimeSlot.SLOT_10_12;
    case 1:
    case "SLOT_12_14":
      return TimeSlot.SLOT_12_14;
    case 2:
    case "SLOT_14_16":
      return TimeSlot.SLOT_14_16;
    case 3:
    case "SLOT_16_18":
      return TimeSlot.SLOT_16_18;
    case 4:
    case "SLOT_18_20":
      return TimeSlot.SLOT_18_20;
    case 5:
    case "SLOT_20_22":
      return TimeSlot.SLOT_20_22;
    case 6:
    case "SLOT_22_00":
      return TimeSlot.SLOT_22_00;
    case -1:
    case "UNRECOGNIZED":
    default:
      return TimeSlot.UNRECOGNIZED;
  }
}

export function timeSlotToJSON(object: TimeSlot): string {
  switch (object) {
    case TimeSlot.SLOT_10_12:
      return "SLOT_10_12";
    case TimeSlot.SLOT_12_14:
      return "SLOT_12_14";
    case TimeSlot.SLOT_14_16:
      return "SLOT_14_16";
    case TimeSlot.SLOT_16_18:
      return "SLOT_16_18";
    case TimeSlot.SLOT_18_20:
      return "SLOT_18_20";
    case TimeSlot.SLOT_20_22:
      return "SLOT_20_22";
    case TimeSlot.SLOT_22_00:
      return "SLOT_22_00";
    case TimeSlot.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Session {
  id: string;
  date: string;
  timeSlot: TimeSlot;
  roomNumber: number;
  movieId: string;
}

function createBaseSession(): Session {
  return { id: "", date: "", timeSlot: 0, roomNumber: 0, movieId: "" };
}

export const Session: MessageFns<Session> = {
  encode(message: Session, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.date !== "") {
      writer.uint32(18).string(message.date);
    }
    if (message.timeSlot !== 0) {
      writer.uint32(24).int32(message.timeSlot);
    }
    if (message.roomNumber !== 0) {
      writer.uint32(32).int32(message.roomNumber);
    }
    if (message.movieId !== "") {
      writer.uint32(42).string(message.movieId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Session {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSession();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.date = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.timeSlot = reader.int32() as any;
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.roomNumber = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.movieId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Session {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      date: isSet(object.date) ? globalThis.String(object.date) : "",
      timeSlot: isSet(object.timeSlot) ? timeSlotFromJSON(object.timeSlot) : 0,
      roomNumber: isSet(object.roomNumber) ? globalThis.Number(object.roomNumber) : 0,
      movieId: isSet(object.movieId) ? globalThis.String(object.movieId) : "",
    };
  },

  toJSON(message: Session): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.date !== "") {
      obj.date = message.date;
    }
    if (message.timeSlot !== 0) {
      obj.timeSlot = timeSlotToJSON(message.timeSlot);
    }
    if (message.roomNumber !== 0) {
      obj.roomNumber = Math.round(message.roomNumber);
    }
    if (message.movieId !== "") {
      obj.movieId = message.movieId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Session>, I>>(base?: I): Session {
    return Session.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Session>, I>>(object: I): Session {
    const message = createBaseSession();
    message.id = object.id ?? "";
    message.date = object.date ?? "";
    message.timeSlot = object.timeSlot ?? 0;
    message.roomNumber = object.roomNumber ?? 0;
    message.movieId = object.movieId ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
