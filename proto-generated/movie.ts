// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.5
//   protoc               v5.28.2
// source: movie.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "movie";

/** src/proto/movie.proto */

export interface Movie {
  id: string;
  name: string;
  uniqueName: string;
  ageRestriction: number;
}

export interface ListMoviesRequest {
}

export interface ListMoviesResponse {
  movies: Movie[];
}

function createBaseMovie(): Movie {
  return { id: "", name: "", uniqueName: "", ageRestriction: 0 };
}

export const Movie: MessageFns<Movie> = {
  encode(message: Movie, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.uniqueName !== "") {
      writer.uint32(26).string(message.uniqueName);
    }
    if (message.ageRestriction !== 0) {
      writer.uint32(32).int32(message.ageRestriction);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Movie {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMovie();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.uniqueName = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.ageRestriction = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Movie {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      uniqueName: isSet(object.uniqueName) ? globalThis.String(object.uniqueName) : "",
      ageRestriction: isSet(object.ageRestriction) ? globalThis.Number(object.ageRestriction) : 0,
    };
  },

  toJSON(message: Movie): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.uniqueName !== "") {
      obj.uniqueName = message.uniqueName;
    }
    if (message.ageRestriction !== 0) {
      obj.ageRestriction = Math.round(message.ageRestriction);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Movie>, I>>(base?: I): Movie {
    return Movie.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Movie>, I>>(object: I): Movie {
    const message = createBaseMovie();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.uniqueName = object.uniqueName ?? "";
    message.ageRestriction = object.ageRestriction ?? 0;
    return message;
  },
};

function createBaseListMoviesRequest(): ListMoviesRequest {
  return {};
}

export const ListMoviesRequest: MessageFns<ListMoviesRequest> = {
  encode(_: ListMoviesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListMoviesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListMoviesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ListMoviesRequest {
    return {};
  },

  toJSON(_: ListMoviesRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<ListMoviesRequest>, I>>(base?: I): ListMoviesRequest {
    return ListMoviesRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListMoviesRequest>, I>>(_: I): ListMoviesRequest {
    const message = createBaseListMoviesRequest();
    return message;
  },
};

function createBaseListMoviesResponse(): ListMoviesResponse {
  return { movies: [] };
}

export const ListMoviesResponse: MessageFns<ListMoviesResponse> = {
  encode(message: ListMoviesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.movies) {
      Movie.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListMoviesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListMoviesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.movies.push(Movie.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListMoviesResponse {
    return { movies: globalThis.Array.isArray(object?.movies) ? object.movies.map((e: any) => Movie.fromJSON(e)) : [] };
  },

  toJSON(message: ListMoviesResponse): unknown {
    const obj: any = {};
    if (message.movies?.length) {
      obj.movies = message.movies.map((e) => Movie.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListMoviesResponse>, I>>(base?: I): ListMoviesResponse {
    return ListMoviesResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListMoviesResponse>, I>>(object: I): ListMoviesResponse {
    const message = createBaseListMoviesResponse();
    message.movies = object.movies?.map((e) => Movie.fromPartial(e)) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
