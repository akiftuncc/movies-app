// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.5
//   protoc               v5.28.2
// source: manager_messages.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { SessionDto } from "./general";

export const protobufPackage = "manager";

export interface AddMoviesRequest {
  name: string;
  ageRestriction: number;
  sessions: SessionDto[];
}

export interface UpdateMovieRequest {
  id: string;
  name?: string | undefined;
  ageRestriction?: number | undefined;
  sessions: SessionDto[];
}

function createBaseAddMoviesRequest(): AddMoviesRequest {
  return { name: "", ageRestriction: 0, sessions: [] };
}

export const AddMoviesRequest: MessageFns<AddMoviesRequest> = {
  encode(message: AddMoviesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.ageRestriction !== 0) {
      writer.uint32(16).int32(message.ageRestriction);
    }
    for (const v of message.sessions) {
      SessionDto.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddMoviesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddMoviesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.ageRestriction = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.sessions.push(SessionDto.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddMoviesRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      ageRestriction: isSet(object.ageRestriction) ? globalThis.Number(object.ageRestriction) : 0,
      sessions: globalThis.Array.isArray(object?.sessions)
        ? object.sessions.map((e: any) => SessionDto.fromJSON(e))
        : [],
    };
  },

  toJSON(message: AddMoviesRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.ageRestriction !== 0) {
      obj.ageRestriction = Math.round(message.ageRestriction);
    }
    if (message.sessions?.length) {
      obj.sessions = message.sessions.map((e) => SessionDto.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddMoviesRequest>, I>>(base?: I): AddMoviesRequest {
    return AddMoviesRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddMoviesRequest>, I>>(object: I): AddMoviesRequest {
    const message = createBaseAddMoviesRequest();
    message.name = object.name ?? "";
    message.ageRestriction = object.ageRestriction ?? 0;
    message.sessions = object.sessions?.map((e) => SessionDto.fromPartial(e)) || [];
    return message;
  },
};

function createBaseUpdateMovieRequest(): UpdateMovieRequest {
  return { id: "", name: undefined, ageRestriction: undefined, sessions: [] };
}

export const UpdateMovieRequest: MessageFns<UpdateMovieRequest> = {
  encode(message: UpdateMovieRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== undefined) {
      writer.uint32(18).string(message.name);
    }
    if (message.ageRestriction !== undefined) {
      writer.uint32(24).int32(message.ageRestriction);
    }
    for (const v of message.sessions) {
      SessionDto.encode(v!, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateMovieRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateMovieRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.ageRestriction = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.sessions.push(SessionDto.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateMovieRequest {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : undefined,
      ageRestriction: isSet(object.ageRestriction) ? globalThis.Number(object.ageRestriction) : undefined,
      sessions: globalThis.Array.isArray(object?.sessions)
        ? object.sessions.map((e: any) => SessionDto.fromJSON(e))
        : [],
    };
  },

  toJSON(message: UpdateMovieRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== undefined) {
      obj.name = message.name;
    }
    if (message.ageRestriction !== undefined) {
      obj.ageRestriction = Math.round(message.ageRestriction);
    }
    if (message.sessions?.length) {
      obj.sessions = message.sessions.map((e) => SessionDto.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateMovieRequest>, I>>(base?: I): UpdateMovieRequest {
    return UpdateMovieRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateMovieRequest>, I>>(object: I): UpdateMovieRequest {
    const message = createBaseUpdateMovieRequest();
    message.id = object.id ?? "";
    message.name = object.name ?? undefined;
    message.ageRestriction = object.ageRestriction ?? undefined;
    message.sessions = object.sessions?.map((e) => SessionDto.fromPartial(e)) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
