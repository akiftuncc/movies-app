// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.5
//   protoc               v5.28.2
// source: user_messages.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { PaginationMetaResult, ResponseStatus, UserType, userTypeFromJSON, userTypeToJSON } from "./general";

export const protobufPackage = "user";

/** src/proto/user.proto */

export interface MovieSessionsDto {
  date: string;
  hour: string;
  room: number;
  availableTickets: string[];
}

export interface MovieDto {
  id: string;
  movieName: string;
  movieSessions: MovieSessionsDto[];
}

export interface ListMoviesResponse {
  movies: MovieDto[];
  status: ResponseStatus | undefined;
  pagination: PaginationMetaResult | undefined;
}

export interface RegisterRequest {
  username: string;
  password: string;
  passwordConfirmation: string;
  age: number;
  type: UserType;
}

export interface RegisterResponse {
  status: ResponseStatus | undefined;
  accessToken: string;
}

export interface LoginRequest {
  username: string;
  password: string;
}

export interface LoginResponse {
  status: ResponseStatus | undefined;
  accessToken: string;
}

export interface JwtUser {
  username: string;
  sub: string;
  role: string;
  iss: string;
}

function createBaseMovieSessionsDto(): MovieSessionsDto {
  return { date: "", hour: "", room: 0, availableTickets: [] };
}

export const MovieSessionsDto: MessageFns<MovieSessionsDto> = {
  encode(message: MovieSessionsDto, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.date !== "") {
      writer.uint32(10).string(message.date);
    }
    if (message.hour !== "") {
      writer.uint32(18).string(message.hour);
    }
    if (message.room !== 0) {
      writer.uint32(24).int32(message.room);
    }
    for (const v of message.availableTickets) {
      writer.uint32(34).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MovieSessionsDto {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMovieSessionsDto();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.date = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.hour = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.room = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.availableTickets.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MovieSessionsDto {
    return {
      date: isSet(object.date) ? globalThis.String(object.date) : "",
      hour: isSet(object.hour) ? globalThis.String(object.hour) : "",
      room: isSet(object.room) ? globalThis.Number(object.room) : 0,
      availableTickets: globalThis.Array.isArray(object?.availableTickets)
        ? object.availableTickets.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: MovieSessionsDto): unknown {
    const obj: any = {};
    if (message.date !== "") {
      obj.date = message.date;
    }
    if (message.hour !== "") {
      obj.hour = message.hour;
    }
    if (message.room !== 0) {
      obj.room = Math.round(message.room);
    }
    if (message.availableTickets?.length) {
      obj.availableTickets = message.availableTickets;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MovieSessionsDto>, I>>(base?: I): MovieSessionsDto {
    return MovieSessionsDto.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MovieSessionsDto>, I>>(object: I): MovieSessionsDto {
    const message = createBaseMovieSessionsDto();
    message.date = object.date ?? "";
    message.hour = object.hour ?? "";
    message.room = object.room ?? 0;
    message.availableTickets = object.availableTickets?.map((e) => e) || [];
    return message;
  },
};

function createBaseMovieDto(): MovieDto {
  return { id: "", movieName: "", movieSessions: [] };
}

export const MovieDto: MessageFns<MovieDto> = {
  encode(message: MovieDto, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.movieName !== "") {
      writer.uint32(18).string(message.movieName);
    }
    for (const v of message.movieSessions) {
      MovieSessionsDto.encode(v!, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MovieDto {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMovieDto();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.movieName = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.movieSessions.push(MovieSessionsDto.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MovieDto {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      movieName: isSet(object.movieName) ? globalThis.String(object.movieName) : "",
      movieSessions: globalThis.Array.isArray(object?.movieSessions)
        ? object.movieSessions.map((e: any) => MovieSessionsDto.fromJSON(e))
        : [],
    };
  },

  toJSON(message: MovieDto): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.movieName !== "") {
      obj.movieName = message.movieName;
    }
    if (message.movieSessions?.length) {
      obj.movieSessions = message.movieSessions.map((e) => MovieSessionsDto.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MovieDto>, I>>(base?: I): MovieDto {
    return MovieDto.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MovieDto>, I>>(object: I): MovieDto {
    const message = createBaseMovieDto();
    message.id = object.id ?? "";
    message.movieName = object.movieName ?? "";
    message.movieSessions = object.movieSessions?.map((e) => MovieSessionsDto.fromPartial(e)) || [];
    return message;
  },
};

function createBaseListMoviesResponse(): ListMoviesResponse {
  return { movies: [], status: undefined, pagination: undefined };
}

export const ListMoviesResponse: MessageFns<ListMoviesResponse> = {
  encode(message: ListMoviesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.movies) {
      MovieDto.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.status !== undefined) {
      ResponseStatus.encode(message.status, writer.uint32(18).fork()).join();
    }
    if (message.pagination !== undefined) {
      PaginationMetaResult.encode(message.pagination, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListMoviesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListMoviesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.movies.push(MovieDto.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.status = ResponseStatus.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.pagination = PaginationMetaResult.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListMoviesResponse {
    return {
      movies: globalThis.Array.isArray(object?.movies) ? object.movies.map((e: any) => MovieDto.fromJSON(e)) : [],
      status: isSet(object.status) ? ResponseStatus.fromJSON(object.status) : undefined,
      pagination: isSet(object.pagination) ? PaginationMetaResult.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: ListMoviesResponse): unknown {
    const obj: any = {};
    if (message.movies?.length) {
      obj.movies = message.movies.map((e) => MovieDto.toJSON(e));
    }
    if (message.status !== undefined) {
      obj.status = ResponseStatus.toJSON(message.status);
    }
    if (message.pagination !== undefined) {
      obj.pagination = PaginationMetaResult.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListMoviesResponse>, I>>(base?: I): ListMoviesResponse {
    return ListMoviesResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListMoviesResponse>, I>>(object: I): ListMoviesResponse {
    const message = createBaseListMoviesResponse();
    message.movies = object.movies?.map((e) => MovieDto.fromPartial(e)) || [];
    message.status = (object.status !== undefined && object.status !== null)
      ? ResponseStatus.fromPartial(object.status)
      : undefined;
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PaginationMetaResult.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseRegisterRequest(): RegisterRequest {
  return { username: "", password: "", passwordConfirmation: "", age: 0, type: 0 };
}

export const RegisterRequest: MessageFns<RegisterRequest> = {
  encode(message: RegisterRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.username !== "") {
      writer.uint32(10).string(message.username);
    }
    if (message.password !== "") {
      writer.uint32(18).string(message.password);
    }
    if (message.passwordConfirmation !== "") {
      writer.uint32(26).string(message.passwordConfirmation);
    }
    if (message.age !== 0) {
      writer.uint32(32).int32(message.age);
    }
    if (message.type !== 0) {
      writer.uint32(40).int32(message.type);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RegisterRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRegisterRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.username = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.password = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.passwordConfirmation = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.age = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RegisterRequest {
    return {
      username: isSet(object.username) ? globalThis.String(object.username) : "",
      password: isSet(object.password) ? globalThis.String(object.password) : "",
      passwordConfirmation: isSet(object.passwordConfirmation) ? globalThis.String(object.passwordConfirmation) : "",
      age: isSet(object.age) ? globalThis.Number(object.age) : 0,
      type: isSet(object.type) ? userTypeFromJSON(object.type) : 0,
    };
  },

  toJSON(message: RegisterRequest): unknown {
    const obj: any = {};
    if (message.username !== "") {
      obj.username = message.username;
    }
    if (message.password !== "") {
      obj.password = message.password;
    }
    if (message.passwordConfirmation !== "") {
      obj.passwordConfirmation = message.passwordConfirmation;
    }
    if (message.age !== 0) {
      obj.age = Math.round(message.age);
    }
    if (message.type !== 0) {
      obj.type = userTypeToJSON(message.type);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RegisterRequest>, I>>(base?: I): RegisterRequest {
    return RegisterRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RegisterRequest>, I>>(object: I): RegisterRequest {
    const message = createBaseRegisterRequest();
    message.username = object.username ?? "";
    message.password = object.password ?? "";
    message.passwordConfirmation = object.passwordConfirmation ?? "";
    message.age = object.age ?? 0;
    message.type = object.type ?? 0;
    return message;
  },
};

function createBaseRegisterResponse(): RegisterResponse {
  return { status: undefined, accessToken: "" };
}

export const RegisterResponse: MessageFns<RegisterResponse> = {
  encode(message: RegisterResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.status !== undefined) {
      ResponseStatus.encode(message.status, writer.uint32(10).fork()).join();
    }
    if (message.accessToken !== "") {
      writer.uint32(18).string(message.accessToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RegisterResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRegisterResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.status = ResponseStatus.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.accessToken = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RegisterResponse {
    return {
      status: isSet(object.status) ? ResponseStatus.fromJSON(object.status) : undefined,
      accessToken: isSet(object.accessToken) ? globalThis.String(object.accessToken) : "",
    };
  },

  toJSON(message: RegisterResponse): unknown {
    const obj: any = {};
    if (message.status !== undefined) {
      obj.status = ResponseStatus.toJSON(message.status);
    }
    if (message.accessToken !== "") {
      obj.accessToken = message.accessToken;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RegisterResponse>, I>>(base?: I): RegisterResponse {
    return RegisterResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RegisterResponse>, I>>(object: I): RegisterResponse {
    const message = createBaseRegisterResponse();
    message.status = (object.status !== undefined && object.status !== null)
      ? ResponseStatus.fromPartial(object.status)
      : undefined;
    message.accessToken = object.accessToken ?? "";
    return message;
  },
};

function createBaseLoginRequest(): LoginRequest {
  return { username: "", password: "" };
}

export const LoginRequest: MessageFns<LoginRequest> = {
  encode(message: LoginRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.username !== "") {
      writer.uint32(10).string(message.username);
    }
    if (message.password !== "") {
      writer.uint32(18).string(message.password);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LoginRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLoginRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.username = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.password = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LoginRequest {
    return {
      username: isSet(object.username) ? globalThis.String(object.username) : "",
      password: isSet(object.password) ? globalThis.String(object.password) : "",
    };
  },

  toJSON(message: LoginRequest): unknown {
    const obj: any = {};
    if (message.username !== "") {
      obj.username = message.username;
    }
    if (message.password !== "") {
      obj.password = message.password;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LoginRequest>, I>>(base?: I): LoginRequest {
    return LoginRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LoginRequest>, I>>(object: I): LoginRequest {
    const message = createBaseLoginRequest();
    message.username = object.username ?? "";
    message.password = object.password ?? "";
    return message;
  },
};

function createBaseLoginResponse(): LoginResponse {
  return { status: undefined, accessToken: "" };
}

export const LoginResponse: MessageFns<LoginResponse> = {
  encode(message: LoginResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.status !== undefined) {
      ResponseStatus.encode(message.status, writer.uint32(10).fork()).join();
    }
    if (message.accessToken !== "") {
      writer.uint32(18).string(message.accessToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LoginResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLoginResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.status = ResponseStatus.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.accessToken = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LoginResponse {
    return {
      status: isSet(object.status) ? ResponseStatus.fromJSON(object.status) : undefined,
      accessToken: isSet(object.accessToken) ? globalThis.String(object.accessToken) : "",
    };
  },

  toJSON(message: LoginResponse): unknown {
    const obj: any = {};
    if (message.status !== undefined) {
      obj.status = ResponseStatus.toJSON(message.status);
    }
    if (message.accessToken !== "") {
      obj.accessToken = message.accessToken;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LoginResponse>, I>>(base?: I): LoginResponse {
    return LoginResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LoginResponse>, I>>(object: I): LoginResponse {
    const message = createBaseLoginResponse();
    message.status = (object.status !== undefined && object.status !== null)
      ? ResponseStatus.fromPartial(object.status)
      : undefined;
    message.accessToken = object.accessToken ?? "";
    return message;
  },
};

function createBaseJwtUser(): JwtUser {
  return { username: "", sub: "", role: "", iss: "" };
}

export const JwtUser: MessageFns<JwtUser> = {
  encode(message: JwtUser, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.username !== "") {
      writer.uint32(10).string(message.username);
    }
    if (message.sub !== "") {
      writer.uint32(18).string(message.sub);
    }
    if (message.role !== "") {
      writer.uint32(26).string(message.role);
    }
    if (message.iss !== "") {
      writer.uint32(34).string(message.iss);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): JwtUser {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseJwtUser();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.username = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.sub = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.role = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.iss = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): JwtUser {
    return {
      username: isSet(object.username) ? globalThis.String(object.username) : "",
      sub: isSet(object.sub) ? globalThis.String(object.sub) : "",
      role: isSet(object.role) ? globalThis.String(object.role) : "",
      iss: isSet(object.iss) ? globalThis.String(object.iss) : "",
    };
  },

  toJSON(message: JwtUser): unknown {
    const obj: any = {};
    if (message.username !== "") {
      obj.username = message.username;
    }
    if (message.sub !== "") {
      obj.sub = message.sub;
    }
    if (message.role !== "") {
      obj.role = message.role;
    }
    if (message.iss !== "") {
      obj.iss = message.iss;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<JwtUser>, I>>(base?: I): JwtUser {
    return JwtUser.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<JwtUser>, I>>(object: I): JwtUser {
    const message = createBaseJwtUser();
    message.username = object.username ?? "";
    message.sub = object.sub ?? "";
    message.role = object.role ?? "";
    message.iss = object.iss ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
