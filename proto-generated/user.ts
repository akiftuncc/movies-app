// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.5
//   protoc               v5.28.2
// source: user.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { PaginationMetaResult, ResponseStatus } from "./general";

export const protobufPackage = "user";

/** src/proto/user.proto */

export enum UserType {
  CUSTOMER = 0,
  MANAGER = 1,
  UNRECOGNIZED = -1,
}

export function userTypeFromJSON(object: any): UserType {
  switch (object) {
    case 0:
    case "CUSTOMER":
      return UserType.CUSTOMER;
    case 1:
    case "MANAGER":
      return UserType.MANAGER;
    case -1:
    case "UNRECOGNIZED":
    default:
      return UserType.UNRECOGNIZED;
  }
}

export function userTypeToJSON(object: UserType): string {
  switch (object) {
    case UserType.CUSTOMER:
      return "CUSTOMER";
    case UserType.MANAGER:
      return "MANAGER";
    case UserType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface User {
  id: string;
  username: string;
  password: string;
  age: number;
  type: UserType;
}

export interface ViewWatchHistoryRequest {
  userId: string;
}

export interface ViewWatchHistoryResponse {
  data: WatchedMovie[];
  status: ResponseStatus | undefined;
  pagination: PaginationMetaResult | undefined;
}

export interface WatchedMovie {
  movieId: string;
  movieName: string;
  watchDate: string;
}

function createBaseUser(): User {
  return { id: "", username: "", password: "", age: 0, type: 0 };
}

export const User: MessageFns<User> = {
  encode(message: User, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.username !== "") {
      writer.uint32(18).string(message.username);
    }
    if (message.password !== "") {
      writer.uint32(26).string(message.password);
    }
    if (message.age !== 0) {
      writer.uint32(32).int32(message.age);
    }
    if (message.type !== 0) {
      writer.uint32(40).int32(message.type);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): User {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUser();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.username = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.password = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.age = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): User {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      username: isSet(object.username) ? globalThis.String(object.username) : "",
      password: isSet(object.password) ? globalThis.String(object.password) : "",
      age: isSet(object.age) ? globalThis.Number(object.age) : 0,
      type: isSet(object.type) ? userTypeFromJSON(object.type) : 0,
    };
  },

  toJSON(message: User): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.username !== "") {
      obj.username = message.username;
    }
    if (message.password !== "") {
      obj.password = message.password;
    }
    if (message.age !== 0) {
      obj.age = Math.round(message.age);
    }
    if (message.type !== 0) {
      obj.type = userTypeToJSON(message.type);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<User>, I>>(base?: I): User {
    return User.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<User>, I>>(object: I): User {
    const message = createBaseUser();
    message.id = object.id ?? "";
    message.username = object.username ?? "";
    message.password = object.password ?? "";
    message.age = object.age ?? 0;
    message.type = object.type ?? 0;
    return message;
  },
};

function createBaseViewWatchHistoryRequest(): ViewWatchHistoryRequest {
  return { userId: "" };
}

export const ViewWatchHistoryRequest: MessageFns<ViewWatchHistoryRequest> = {
  encode(message: ViewWatchHistoryRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ViewWatchHistoryRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseViewWatchHistoryRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ViewWatchHistoryRequest {
    return { userId: isSet(object.userId) ? globalThis.String(object.userId) : "" };
  },

  toJSON(message: ViewWatchHistoryRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ViewWatchHistoryRequest>, I>>(base?: I): ViewWatchHistoryRequest {
    return ViewWatchHistoryRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ViewWatchHistoryRequest>, I>>(object: I): ViewWatchHistoryRequest {
    const message = createBaseViewWatchHistoryRequest();
    message.userId = object.userId ?? "";
    return message;
  },
};

function createBaseViewWatchHistoryResponse(): ViewWatchHistoryResponse {
  return { data: [], status: undefined, pagination: undefined };
}

export const ViewWatchHistoryResponse: MessageFns<ViewWatchHistoryResponse> = {
  encode(message: ViewWatchHistoryResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.data) {
      WatchedMovie.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.status !== undefined) {
      ResponseStatus.encode(message.status, writer.uint32(18).fork()).join();
    }
    if (message.pagination !== undefined) {
      PaginationMetaResult.encode(message.pagination, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ViewWatchHistoryResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseViewWatchHistoryResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data.push(WatchedMovie.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.status = ResponseStatus.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.pagination = PaginationMetaResult.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ViewWatchHistoryResponse {
    return {
      data: globalThis.Array.isArray(object?.data) ? object.data.map((e: any) => WatchedMovie.fromJSON(e)) : [],
      status: isSet(object.status) ? ResponseStatus.fromJSON(object.status) : undefined,
      pagination: isSet(object.pagination) ? PaginationMetaResult.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: ViewWatchHistoryResponse): unknown {
    const obj: any = {};
    if (message.data?.length) {
      obj.data = message.data.map((e) => WatchedMovie.toJSON(e));
    }
    if (message.status !== undefined) {
      obj.status = ResponseStatus.toJSON(message.status);
    }
    if (message.pagination !== undefined) {
      obj.pagination = PaginationMetaResult.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ViewWatchHistoryResponse>, I>>(base?: I): ViewWatchHistoryResponse {
    return ViewWatchHistoryResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ViewWatchHistoryResponse>, I>>(object: I): ViewWatchHistoryResponse {
    const message = createBaseViewWatchHistoryResponse();
    message.data = object.data?.map((e) => WatchedMovie.fromPartial(e)) || [];
    message.status = (object.status !== undefined && object.status !== null)
      ? ResponseStatus.fromPartial(object.status)
      : undefined;
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PaginationMetaResult.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseWatchedMovie(): WatchedMovie {
  return { movieId: "", movieName: "", watchDate: "" };
}

export const WatchedMovie: MessageFns<WatchedMovie> = {
  encode(message: WatchedMovie, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.movieId !== "") {
      writer.uint32(10).string(message.movieId);
    }
    if (message.movieName !== "") {
      writer.uint32(18).string(message.movieName);
    }
    if (message.watchDate !== "") {
      writer.uint32(26).string(message.watchDate);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WatchedMovie {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWatchedMovie();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.movieId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.movieName = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.watchDate = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WatchedMovie {
    return {
      movieId: isSet(object.movieId) ? globalThis.String(object.movieId) : "",
      movieName: isSet(object.movieName) ? globalThis.String(object.movieName) : "",
      watchDate: isSet(object.watchDate) ? globalThis.String(object.watchDate) : "",
    };
  },

  toJSON(message: WatchedMovie): unknown {
    const obj: any = {};
    if (message.movieId !== "") {
      obj.movieId = message.movieId;
    }
    if (message.movieName !== "") {
      obj.movieName = message.movieName;
    }
    if (message.watchDate !== "") {
      obj.watchDate = message.watchDate;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WatchedMovie>, I>>(base?: I): WatchedMovie {
    return WatchedMovie.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WatchedMovie>, I>>(object: I): WatchedMovie {
    const message = createBaseWatchedMovie();
    message.movieId = object.movieId ?? "";
    message.movieName = object.movieName ?? "";
    message.watchDate = object.watchDate ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
