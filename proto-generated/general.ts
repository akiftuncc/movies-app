// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.5
//   protoc               v5.28.2
// source: general.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "general";

export interface Error {
  errors: string[];
}

export interface ResponseStatus {
  code: number;
  error?: Error | undefined;
}

export interface EmptyResponse {
  status: ResponseStatus | undefined;
}

export interface ByIdRequest {
  id: string;
}

export interface EmptyRequest {
}

export interface PaginateRequest {
  page: number;
  perPage: number;
  fulltextSearch?: string | undefined;
}

export interface PaginationMetaResult {
  recordsTotal: number;
  recordsFiltered: number;
}

function createBaseError(): Error {
  return { errors: [] };
}

export const Error: MessageFns<Error> = {
  encode(message: Error, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.errors) {
      writer.uint32(10).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Error {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseError();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.errors.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Error {
    return {
      errors: globalThis.Array.isArray(object?.errors) ? object.errors.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: Error): unknown {
    const obj: any = {};
    if (message.errors?.length) {
      obj.errors = message.errors;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Error>, I>>(base?: I): Error {
    return Error.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Error>, I>>(object: I): Error {
    const message = createBaseError();
    message.errors = object.errors?.map((e) => e) || [];
    return message;
  },
};

function createBaseResponseStatus(): ResponseStatus {
  return { code: 0, error: undefined };
}

export const ResponseStatus: MessageFns<ResponseStatus> = {
  encode(message: ResponseStatus, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.code !== 0) {
      writer.uint32(8).int32(message.code);
    }
    if (message.error !== undefined) {
      Error.encode(message.error, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ResponseStatus {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseResponseStatus();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.code = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.error = Error.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ResponseStatus {
    return {
      code: isSet(object.code) ? globalThis.Number(object.code) : 0,
      error: isSet(object.error) ? Error.fromJSON(object.error) : undefined,
    };
  },

  toJSON(message: ResponseStatus): unknown {
    const obj: any = {};
    if (message.code !== 0) {
      obj.code = Math.round(message.code);
    }
    if (message.error !== undefined) {
      obj.error = Error.toJSON(message.error);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ResponseStatus>, I>>(base?: I): ResponseStatus {
    return ResponseStatus.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ResponseStatus>, I>>(object: I): ResponseStatus {
    const message = createBaseResponseStatus();
    message.code = object.code ?? 0;
    message.error = (object.error !== undefined && object.error !== null) ? Error.fromPartial(object.error) : undefined;
    return message;
  },
};

function createBaseEmptyResponse(): EmptyResponse {
  return { status: undefined };
}

export const EmptyResponse: MessageFns<EmptyResponse> = {
  encode(message: EmptyResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.status !== undefined) {
      ResponseStatus.encode(message.status, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EmptyResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEmptyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.status = ResponseStatus.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EmptyResponse {
    return { status: isSet(object.status) ? ResponseStatus.fromJSON(object.status) : undefined };
  },

  toJSON(message: EmptyResponse): unknown {
    const obj: any = {};
    if (message.status !== undefined) {
      obj.status = ResponseStatus.toJSON(message.status);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EmptyResponse>, I>>(base?: I): EmptyResponse {
    return EmptyResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EmptyResponse>, I>>(object: I): EmptyResponse {
    const message = createBaseEmptyResponse();
    message.status = (object.status !== undefined && object.status !== null)
      ? ResponseStatus.fromPartial(object.status)
      : undefined;
    return message;
  },
};

function createBaseByIdRequest(): ByIdRequest {
  return { id: "" };
}

export const ByIdRequest: MessageFns<ByIdRequest> = {
  encode(message: ByIdRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ByIdRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseByIdRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ByIdRequest {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: ByIdRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ByIdRequest>, I>>(base?: I): ByIdRequest {
    return ByIdRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ByIdRequest>, I>>(object: I): ByIdRequest {
    const message = createBaseByIdRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseEmptyRequest(): EmptyRequest {
  return {};
}

export const EmptyRequest: MessageFns<EmptyRequest> = {
  encode(_: EmptyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EmptyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEmptyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): EmptyRequest {
    return {};
  },

  toJSON(_: EmptyRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<EmptyRequest>, I>>(base?: I): EmptyRequest {
    return EmptyRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EmptyRequest>, I>>(_: I): EmptyRequest {
    const message = createBaseEmptyRequest();
    return message;
  },
};

function createBasePaginateRequest(): PaginateRequest {
  return { page: 0, perPage: 0, fulltextSearch: undefined };
}

export const PaginateRequest: MessageFns<PaginateRequest> = {
  encode(message: PaginateRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.page !== 0) {
      writer.uint32(8).int32(message.page);
    }
    if (message.perPage !== 0) {
      writer.uint32(16).int32(message.perPage);
    }
    if (message.fulltextSearch !== undefined) {
      writer.uint32(26).string(message.fulltextSearch);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PaginateRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePaginateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.page = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.perPage = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.fulltextSearch = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PaginateRequest {
    return {
      page: isSet(object.page) ? globalThis.Number(object.page) : 0,
      perPage: isSet(object.perPage) ? globalThis.Number(object.perPage) : 0,
      fulltextSearch: isSet(object.fulltextSearch) ? globalThis.String(object.fulltextSearch) : undefined,
    };
  },

  toJSON(message: PaginateRequest): unknown {
    const obj: any = {};
    if (message.page !== 0) {
      obj.page = Math.round(message.page);
    }
    if (message.perPage !== 0) {
      obj.perPage = Math.round(message.perPage);
    }
    if (message.fulltextSearch !== undefined) {
      obj.fulltextSearch = message.fulltextSearch;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PaginateRequest>, I>>(base?: I): PaginateRequest {
    return PaginateRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PaginateRequest>, I>>(object: I): PaginateRequest {
    const message = createBasePaginateRequest();
    message.page = object.page ?? 0;
    message.perPage = object.perPage ?? 0;
    message.fulltextSearch = object.fulltextSearch ?? undefined;
    return message;
  },
};

function createBasePaginationMetaResult(): PaginationMetaResult {
  return { recordsTotal: 0, recordsFiltered: 0 };
}

export const PaginationMetaResult: MessageFns<PaginationMetaResult> = {
  encode(message: PaginationMetaResult, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.recordsTotal !== 0) {
      writer.uint32(8).int32(message.recordsTotal);
    }
    if (message.recordsFiltered !== 0) {
      writer.uint32(16).int32(message.recordsFiltered);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PaginationMetaResult {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePaginationMetaResult();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.recordsTotal = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.recordsFiltered = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PaginationMetaResult {
    return {
      recordsTotal: isSet(object.recordsTotal) ? globalThis.Number(object.recordsTotal) : 0,
      recordsFiltered: isSet(object.recordsFiltered) ? globalThis.Number(object.recordsFiltered) : 0,
    };
  },

  toJSON(message: PaginationMetaResult): unknown {
    const obj: any = {};
    if (message.recordsTotal !== 0) {
      obj.recordsTotal = Math.round(message.recordsTotal);
    }
    if (message.recordsFiltered !== 0) {
      obj.recordsFiltered = Math.round(message.recordsFiltered);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PaginationMetaResult>, I>>(base?: I): PaginationMetaResult {
    return PaginationMetaResult.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PaginationMetaResult>, I>>(object: I): PaginationMetaResult {
    const message = createBasePaginationMetaResult();
    message.recordsTotal = object.recordsTotal ?? 0;
    message.recordsFiltered = object.recordsFiltered ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
