// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.5
//   protoc               v5.28.2
// source: customer_messages.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { PaginationMetaResult, ResponseStatus } from "./general";

export const protobufPackage = "customer";

/** src/proto/movie.proto */

export interface ViewWatchHistoryRequest {
  userId: string;
}

export interface ViewWatchHistoryResponse {
  data: WatchedMovieDto[];
  status: ResponseStatus | undefined;
  pagination: PaginationMetaResult | undefined;
}

export interface WatchedMovieDto {
  id: string;
  name: string;
  watchDate: string;
}

export interface TicketDto {
  ticketDate: string;
  movieName: string;
  room: string;
}

export interface BuyTicketResponse {
  status: ResponseStatus | undefined;
  data: TicketDto | undefined;
}

export interface WatchMovieRequest {
  userId: string;
  ticketId: string;
}

export interface MovieDto {
  movieName: string;
  room: string;
  date: string;
}

export interface WatchMovieResponse {
  status: ResponseStatus | undefined;
  movie: MovieDto | undefined;
}

function createBaseViewWatchHistoryRequest(): ViewWatchHistoryRequest {
  return { userId: "" };
}

export const ViewWatchHistoryRequest: MessageFns<ViewWatchHistoryRequest> = {
  encode(message: ViewWatchHistoryRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ViewWatchHistoryRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseViewWatchHistoryRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ViewWatchHistoryRequest {
    return { userId: isSet(object.userId) ? globalThis.String(object.userId) : "" };
  },

  toJSON(message: ViewWatchHistoryRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ViewWatchHistoryRequest>, I>>(base?: I): ViewWatchHistoryRequest {
    return ViewWatchHistoryRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ViewWatchHistoryRequest>, I>>(object: I): ViewWatchHistoryRequest {
    const message = createBaseViewWatchHistoryRequest();
    message.userId = object.userId ?? "";
    return message;
  },
};

function createBaseViewWatchHistoryResponse(): ViewWatchHistoryResponse {
  return { data: [], status: undefined, pagination: undefined };
}

export const ViewWatchHistoryResponse: MessageFns<ViewWatchHistoryResponse> = {
  encode(message: ViewWatchHistoryResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.data) {
      WatchedMovieDto.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.status !== undefined) {
      ResponseStatus.encode(message.status, writer.uint32(18).fork()).join();
    }
    if (message.pagination !== undefined) {
      PaginationMetaResult.encode(message.pagination, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ViewWatchHistoryResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseViewWatchHistoryResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.data.push(WatchedMovieDto.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.status = ResponseStatus.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.pagination = PaginationMetaResult.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ViewWatchHistoryResponse {
    return {
      data: globalThis.Array.isArray(object?.data) ? object.data.map((e: any) => WatchedMovieDto.fromJSON(e)) : [],
      status: isSet(object.status) ? ResponseStatus.fromJSON(object.status) : undefined,
      pagination: isSet(object.pagination) ? PaginationMetaResult.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: ViewWatchHistoryResponse): unknown {
    const obj: any = {};
    if (message.data?.length) {
      obj.data = message.data.map((e) => WatchedMovieDto.toJSON(e));
    }
    if (message.status !== undefined) {
      obj.status = ResponseStatus.toJSON(message.status);
    }
    if (message.pagination !== undefined) {
      obj.pagination = PaginationMetaResult.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ViewWatchHistoryResponse>, I>>(base?: I): ViewWatchHistoryResponse {
    return ViewWatchHistoryResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ViewWatchHistoryResponse>, I>>(object: I): ViewWatchHistoryResponse {
    const message = createBaseViewWatchHistoryResponse();
    message.data = object.data?.map((e) => WatchedMovieDto.fromPartial(e)) || [];
    message.status = (object.status !== undefined && object.status !== null)
      ? ResponseStatus.fromPartial(object.status)
      : undefined;
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PaginationMetaResult.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseWatchedMovieDto(): WatchedMovieDto {
  return { id: "", name: "", watchDate: "" };
}

export const WatchedMovieDto: MessageFns<WatchedMovieDto> = {
  encode(message: WatchedMovieDto, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.watchDate !== "") {
      writer.uint32(26).string(message.watchDate);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WatchedMovieDto {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWatchedMovieDto();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.watchDate = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WatchedMovieDto {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      watchDate: isSet(object.watchDate) ? globalThis.String(object.watchDate) : "",
    };
  },

  toJSON(message: WatchedMovieDto): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.watchDate !== "") {
      obj.watchDate = message.watchDate;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WatchedMovieDto>, I>>(base?: I): WatchedMovieDto {
    return WatchedMovieDto.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WatchedMovieDto>, I>>(object: I): WatchedMovieDto {
    const message = createBaseWatchedMovieDto();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.watchDate = object.watchDate ?? "";
    return message;
  },
};

function createBaseTicketDto(): TicketDto {
  return { ticketDate: "", movieName: "", room: "" };
}

export const TicketDto: MessageFns<TicketDto> = {
  encode(message: TicketDto, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.ticketDate !== "") {
      writer.uint32(10).string(message.ticketDate);
    }
    if (message.movieName !== "") {
      writer.uint32(18).string(message.movieName);
    }
    if (message.room !== "") {
      writer.uint32(26).string(message.room);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TicketDto {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTicketDto();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.ticketDate = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.movieName = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.room = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TicketDto {
    return {
      ticketDate: isSet(object.ticketDate) ? globalThis.String(object.ticketDate) : "",
      movieName: isSet(object.movieName) ? globalThis.String(object.movieName) : "",
      room: isSet(object.room) ? globalThis.String(object.room) : "",
    };
  },

  toJSON(message: TicketDto): unknown {
    const obj: any = {};
    if (message.ticketDate !== "") {
      obj.ticketDate = message.ticketDate;
    }
    if (message.movieName !== "") {
      obj.movieName = message.movieName;
    }
    if (message.room !== "") {
      obj.room = message.room;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TicketDto>, I>>(base?: I): TicketDto {
    return TicketDto.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TicketDto>, I>>(object: I): TicketDto {
    const message = createBaseTicketDto();
    message.ticketDate = object.ticketDate ?? "";
    message.movieName = object.movieName ?? "";
    message.room = object.room ?? "";
    return message;
  },
};

function createBaseBuyTicketResponse(): BuyTicketResponse {
  return { status: undefined, data: undefined };
}

export const BuyTicketResponse: MessageFns<BuyTicketResponse> = {
  encode(message: BuyTicketResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.status !== undefined) {
      ResponseStatus.encode(message.status, writer.uint32(10).fork()).join();
    }
    if (message.data !== undefined) {
      TicketDto.encode(message.data, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BuyTicketResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBuyTicketResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.status = ResponseStatus.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.data = TicketDto.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BuyTicketResponse {
    return {
      status: isSet(object.status) ? ResponseStatus.fromJSON(object.status) : undefined,
      data: isSet(object.data) ? TicketDto.fromJSON(object.data) : undefined,
    };
  },

  toJSON(message: BuyTicketResponse): unknown {
    const obj: any = {};
    if (message.status !== undefined) {
      obj.status = ResponseStatus.toJSON(message.status);
    }
    if (message.data !== undefined) {
      obj.data = TicketDto.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BuyTicketResponse>, I>>(base?: I): BuyTicketResponse {
    return BuyTicketResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BuyTicketResponse>, I>>(object: I): BuyTicketResponse {
    const message = createBaseBuyTicketResponse();
    message.status = (object.status !== undefined && object.status !== null)
      ? ResponseStatus.fromPartial(object.status)
      : undefined;
    message.data = (object.data !== undefined && object.data !== null) ? TicketDto.fromPartial(object.data) : undefined;
    return message;
  },
};

function createBaseWatchMovieRequest(): WatchMovieRequest {
  return { userId: "", ticketId: "" };
}

export const WatchMovieRequest: MessageFns<WatchMovieRequest> = {
  encode(message: WatchMovieRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.ticketId !== "") {
      writer.uint32(18).string(message.ticketId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WatchMovieRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWatchMovieRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.ticketId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WatchMovieRequest {
    return {
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      ticketId: isSet(object.ticketId) ? globalThis.String(object.ticketId) : "",
    };
  },

  toJSON(message: WatchMovieRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.ticketId !== "") {
      obj.ticketId = message.ticketId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WatchMovieRequest>, I>>(base?: I): WatchMovieRequest {
    return WatchMovieRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WatchMovieRequest>, I>>(object: I): WatchMovieRequest {
    const message = createBaseWatchMovieRequest();
    message.userId = object.userId ?? "";
    message.ticketId = object.ticketId ?? "";
    return message;
  },
};

function createBaseMovieDto(): MovieDto {
  return { movieName: "", room: "", date: "" };
}

export const MovieDto: MessageFns<MovieDto> = {
  encode(message: MovieDto, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.movieName !== "") {
      writer.uint32(10).string(message.movieName);
    }
    if (message.room !== "") {
      writer.uint32(18).string(message.room);
    }
    if (message.date !== "") {
      writer.uint32(26).string(message.date);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MovieDto {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMovieDto();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.movieName = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.room = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.date = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MovieDto {
    return {
      movieName: isSet(object.movieName) ? globalThis.String(object.movieName) : "",
      room: isSet(object.room) ? globalThis.String(object.room) : "",
      date: isSet(object.date) ? globalThis.String(object.date) : "",
    };
  },

  toJSON(message: MovieDto): unknown {
    const obj: any = {};
    if (message.movieName !== "") {
      obj.movieName = message.movieName;
    }
    if (message.room !== "") {
      obj.room = message.room;
    }
    if (message.date !== "") {
      obj.date = message.date;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MovieDto>, I>>(base?: I): MovieDto {
    return MovieDto.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MovieDto>, I>>(object: I): MovieDto {
    const message = createBaseMovieDto();
    message.movieName = object.movieName ?? "";
    message.room = object.room ?? "";
    message.date = object.date ?? "";
    return message;
  },
};

function createBaseWatchMovieResponse(): WatchMovieResponse {
  return { status: undefined, movie: undefined };
}

export const WatchMovieResponse: MessageFns<WatchMovieResponse> = {
  encode(message: WatchMovieResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.status !== undefined) {
      ResponseStatus.encode(message.status, writer.uint32(10).fork()).join();
    }
    if (message.movie !== undefined) {
      MovieDto.encode(message.movie, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WatchMovieResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWatchMovieResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.status = ResponseStatus.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.movie = MovieDto.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WatchMovieResponse {
    return {
      status: isSet(object.status) ? ResponseStatus.fromJSON(object.status) : undefined,
      movie: isSet(object.movie) ? MovieDto.fromJSON(object.movie) : undefined,
    };
  },

  toJSON(message: WatchMovieResponse): unknown {
    const obj: any = {};
    if (message.status !== undefined) {
      obj.status = ResponseStatus.toJSON(message.status);
    }
    if (message.movie !== undefined) {
      obj.movie = MovieDto.toJSON(message.movie);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WatchMovieResponse>, I>>(base?: I): WatchMovieResponse {
    return WatchMovieResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WatchMovieResponse>, I>>(object: I): WatchMovieResponse {
    const message = createBaseWatchMovieResponse();
    message.status = (object.status !== undefined && object.status !== null)
      ? ResponseStatus.fromPartial(object.status)
      : undefined;
    message.movie = (object.movie !== undefined && object.movie !== null)
      ? MovieDto.fromPartial(object.movie)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
